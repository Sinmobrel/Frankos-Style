require('dotenv').config();
const mongoose = require('mongoose');
const Product = require('../models/product');

// Conectar a MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/mean-stack-db';

mongoose.connect(MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('‚úÖ Conectado a MongoDB');
  analyzeProducts();
}).catch(err => {
  console.error('‚ùå Error conectando a MongoDB:', err);
});

async function analyzeProducts() {
  try {
    console.log('\nüìä AN√ÅLISIS COMPLETO DE PRODUCTOS EN LA BASE DE DATOS');
    console.log('='.repeat(60));
    
    // Obtener todos los productos
    const products = await Product.find({});
    console.log(`\nüì¶ TOTAL DE PRODUCTOS: ${products.length}\n`);
    
    if (products.length === 0) {
      console.log('‚ùå No hay productos en la base de datos');
      process.exit(0);
    }
    
    // An√°lisis por categor√≠as
    const categories = {};
    const prices = [];
    const stockLevels = [];
    let withImages = 0;
    let withDescriptions = 0;
    
    console.log('üìã LISTADO COMPLETO DE PRODUCTOS:');
    console.log('-'.repeat(60));
    
    products.forEach((product, index) => {
      console.log(`\n${index + 1}. üì¶ PRODUCTO: ${product.name}`);
      console.log(`   üè∑Ô∏è  ID: ${product._id}`);
      console.log(`   üéØ Categor√≠a: ${product.category || 'SIN CATEGOR√çA'}`);
      console.log(`   üí∞ Precio: $${product.price || 'NO DEFINIDO'}`);
      console.log(`   üì¶ Stock: ${product.stock || 0} unidades`);
      console.log(`   üñºÔ∏è  Imagen: ${product.image || product.imageUrl || 'NO TIENE'}`);
      console.log(`   üìù Descripci√≥n: ${product.description ? `"${product.description}"` : 'SIN DESCRIPCI√ìN'}`);
      
      // Mostrar informaci√≥n t√©cnica adicional
      console.log(`   üé® Color principal: ${product.mainColor || 'NO DEFINIDO'}`);
      console.log(`   üìè Tipo de producto: ${product.productType || 'NO DEFINIDO'}`);
      console.log(`   ‚úÇÔ∏è  Corte: ${product.cut || 'NO DEFINIDO'}`);
      console.log(`   üè∑Ô∏è  Rango de precio: ${product.priceRange || 'NO DEFINIDO'}`);
      console.log(`   üìê Tallas: ${product.sizesText || 'NO DEFINIDO'}`);
      console.log(`   üßµ Material: ${product.material || 'NO DEFINIDO'}`);
      console.log(`   üé™ Eventos: ${product.eventTypes && product.eventTypes.length > 0 ? product.eventTypes.join(', ') : 'NO DEFINIDO'}`);
      console.log(`   üì¶ Incluye: ${product.includes && product.includes.length > 0 ? product.includes.join(', ') : 'NO DEFINIDO'}`);
      console.log(`   üé® Colores: ${product.colors && product.colors.length > 0 ? product.colors.join(', ') : 'NO DEFINIDO'}`);
      console.log(`   üìÖ Creado: ${product.createdAt || 'No disponible'}`);
      
      // Recopilar estad√≠sticas
      if (product.category) {
        categories[product.category] = (categories[product.category] || 0) + 1;
      }
      
      if (product.price) {
        prices.push(product.price);
      }
      
      if (product.stock) {
        stockLevels.push(product.stock);
      }
      
      if (product.image || product.imageUrl) {
        withImages++;
      }
      
      if (product.description && product.description.trim()) {
        withDescriptions++;
      }
      
      console.log('   ' + '‚îÄ'.repeat(50));
    });
    
    // Resumen estad√≠stico
    console.log('\nüìà RESUMEN ESTAD√çSTICO:');
    console.log('='.repeat(40));
    
    console.log(`\nüè∑Ô∏è  CATEGOR√çAS (${Object.keys(categories).length} diferentes):`);
    Object.entries(categories)
      .sort(([,a], [,b]) => b - a)
      .forEach(([category, count]) => {
        console.log(`   ‚Ä¢ ${category}: ${count} productos`);
      });
    
    if (prices.length > 0) {
      const minPrice = Math.min(...prices);
      const maxPrice = Math.max(...prices);
      const avgPrice = prices.reduce((a, b) => a + b, 0) / prices.length;
      
      console.log(`\nüí∞ PRECIOS:`);
      console.log(`   ‚Ä¢ M√≠nimo: $${minPrice}`);
      console.log(`   ‚Ä¢ M√°ximo: $${maxPrice}`);
      console.log(`   ‚Ä¢ Promedio: $${avgPrice.toFixed(2)}`);
      console.log(`   ‚Ä¢ Productos con precio: ${prices.length}/${products.length}`);
    }
    
    if (stockLevels.length > 0) {
      const totalStock = stockLevels.reduce((a, b) => a + b, 0);
      const avgStock = totalStock / stockLevels.length;
      const inStock = stockLevels.filter(s => s > 0).length;
      
      console.log(`\nüì¶ INVENTARIO:`);
      console.log(`   ‚Ä¢ Stock total: ${totalStock} unidades`);
      console.log(`   ‚Ä¢ Stock promedio: ${avgStock.toFixed(1)} unidades`);
      console.log(`   ‚Ä¢ Productos en stock: ${inStock}/${products.length}`);
      console.log(`   ‚Ä¢ Productos sin stock: ${products.length - inStock}`);
    }
    
    console.log(`\nüñºÔ∏è  IM√ÅGENES:`);
    console.log(`   ‚Ä¢ Con imagen: ${withImages}/${products.length} (${(withImages/products.length*100).toFixed(1)}%)`);
    console.log(`   ‚Ä¢ Sin imagen: ${products.length - withImages}/${products.length} (${((products.length - withImages)/products.length*100).toFixed(1)}%)`);
    
    console.log(`\nüìù DESCRIPCIONES:`);
    console.log(`   ‚Ä¢ Con descripci√≥n: ${withDescriptions}/${products.length} (${(withDescriptions/products.length*100).toFixed(1)}%)`);
    console.log(`   ‚Ä¢ Sin descripci√≥n: ${products.length - withDescriptions}/${products.length} (${((products.length - withDescriptions)/products.length*100).toFixed(1)}%)`);
    
    // Detectar problemas
    console.log(`\n‚ö†Ô∏è  PROBLEMAS DETECTADOS:`);
    const issues = [];
    
    if (withImages < products.length * 0.8) {
      issues.push(`‚Ä¢ M√°s del 20% de productos sin imagen`);
    }
    
    if (withDescriptions < products.length * 0.7) {
      issues.push(`‚Ä¢ M√°s del 30% de productos sin descripci√≥n`);
    }
    
    const productsWithoutPrice = products.filter(p => !p.price || p.price <= 0).length;
    if (productsWithoutPrice > 0) {
      issues.push(`‚Ä¢ ${productsWithoutPrice} productos sin precio v√°lido`);
    }
    
    const productsOutOfStock = products.filter(p => !p.stock || p.stock <= 0).length;
    if (productsOutOfStock > products.length * 0.3) {
      issues.push(`‚Ä¢ M√°s del 30% de productos sin stock`);
    }
    
    if (issues.length > 0) {
      issues.forEach(issue => console.log(`   ${issue}`));
    } else {
      console.log(`   ‚úÖ No se detectaron problemas graves`);
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ An√°lisis completado');
    
  } catch (error) {
    console.error('‚ùå Error analizando productos:', error);
  } finally {
    mongoose.disconnect();
    process.exit(0);
  }
}