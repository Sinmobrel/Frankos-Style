const axios = require('axios');

// Configuraci√≥n del servidor
const BASE_URL = 'http://localhost:3000';
const CHAT_ENDPOINT = `${BASE_URL}/api/chat`;

// Preguntas espec√≠ficas sobre productos que DEBEN ir a IA
const productQuestions = [
  // CONSULTAS QUE DEBEN MOSTRAR TRAJES
  "que trajes tienen disponibles?",
  "quiero ver trajes",
  "mu√©strame trajes",
  "tienen trajes azules?",
  "que precios tienen los trajes?",
  "necesito un traje para boda",
  "busco un traje elegante",
  "quiero comprar un traje",
  "tienen trajes en talla 42?",
  "que colores de trajes manejan?",
  
  // CONSULTAS QUE DEBEN MOSTRAR CAMISAS
  "que camisas tienen?",
  "mu√©strame camisas",
  "camisas blancas disponibles?",
  "precio de las camisas",
  "camisas slim fit",
  
  // CONSULTAS QUE DEBEN MOSTRAR CORBATAS
  "que corbatas tienen?",
  "corbatas azules",
  "precio corbatas",
  "corbatas para eventos",
  
  // CONSULTAS GENERALES QUE DEBEN USAR IA
  "que productos recomiendan?",
  "que tienen en stock?",
  "muestrame el cat√°logo",
  "que hay disponible?",
  "productos m√°s vendidos",
  
  // CONSULTAS QUE S√ç DEBEN SER FAQ
  "donde est√°n ubicados?",
  "que horarios tienen?",
  "aceptan tarjetas?",
  "qu√© es Franko's Style?",
  "tienen zapatos?"
];

// Funci√≥n para hacer una pregunta al chatbot
async function askQuestion(question) {
  try {
    const response = await axios.post(CHAT_ENDPOINT, {
      message: question,
      history: []
    }, {
      timeout: 15000
    });
    
    return {
      success: true,
      data: response.data
    };
  } catch (error) {
    return {
      success: false,
      error: error.message,
      status: error.response?.status || 'No status'
    };
  }
}

// Funci√≥n principal para ejecutar las pruebas
async function testProductQueries() {
  console.log('üß™ PRUEBAS DE CONSULTAS DE PRODUCTOS VS FAQ');
  console.log('=' .repeat(60));
  console.log(`üìã Total de preguntas a probar: ${productQuestions.length}`);
  console.log(`üåê Servidor: ${BASE_URL}`);
  console.log('=' .repeat(60));
  
  let faqResponses = 0;
  let aiResponses = 0;
  let errors = 0;
  let productResponsesFound = 0;
  
  for (let i = 0; i < productQuestions.length; i++) {
    const question = productQuestions[i];
    console.log(`\n[${i + 1}/${productQuestions.length}] Pregunta: "${question}"`);
    
    const result = await askQuestion(question);
    
    if (result.success) {
      const source = result.data.source || 'AI';
      const response = result.data.reply || result.data.response || 'Sin respuesta';
      const hasProducts = result.data.products && result.data.products.length > 0;
      
      console.log(`‚úÖ Fuente: ${source}`);
      console.log(`üì¶ Productos: ${hasProducts ? result.data.products.length : 0}`);
      console.log(`üí¨ Respuesta: ${response.substring(0, 100)}${response.length > 100 ? '...' : ''}`);
      
      if (source === 'FAQ') {
        faqResponses++;
      } else {
        aiResponses++;
        if (hasProducts) {
          productResponsesFound++;
          console.log(`üéØ ¬°PRODUCTOS ENCONTRADOS! (${result.data.products.length})`);
        }
      }
    } else {
      console.log(`‚ùå Error: ${result.error}`);
      errors++;
    }
    
    // Pausa entre preguntas
    await new Promise(resolve => setTimeout(resolve, 800));
  }
  
  // Resumen final
  console.log('\n' + '=' .repeat(60));
  console.log('üìä RESUMEN DE RESULTADOS - PRODUCTOS VS FAQ');
  console.log('=' .repeat(60));
  console.log(`üéØ Respuestas FAQ: ${faqResponses}`);
  console.log(`ü§ñ Respuestas IA: ${aiResponses}`);
  console.log(`üì¶ Con productos: ${productResponsesFound}`);
  console.log(`‚ùå Errores: ${errors}`);
  console.log(`üìà IA/Total: ${((aiResponses / productQuestions.length) * 100).toFixed(1)}%`);
  console.log(`üéØ Productos/IA: ${aiResponses > 0 ? ((productResponsesFound / aiResponses) * 100).toFixed(1) : 0}%`);
  
  return {
    faqResponses,
    aiResponses,
    productResponsesFound,
    errors,
    total: productQuestions.length
  };
}

// Ejecutar si es el archivo principal
if (require.main === module) {
  testProductQueries().catch(error => {
    console.error('üí• Error fatal en el script:', error);
    process.exit(1);
  });
}

module.exports = { testProductQueries };